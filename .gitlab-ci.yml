stages:
  - build
  - test
  - deploy
  - verify

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

lint:
  stage: test
  image: golangci/golangci-lint:v1.42
  script:
    - golangci-lint run -v -E golint -E gofmt -E goconst -E interfacer -E gocritic -E gocognit -E gocyclo
  except:
    - schedules

end-to-end:
  stage: test
  image: golang:1.22-bookworm
  variables:
    ENABLE_E2E_TESTS: 1
    E2E_START_APP: 1
    E2E_DISCORD_CHANNEL_ID: $E2E_DEV_DISCORD_CHANNEL_ID
    DISCORD_TOKEN: $DEV_DISCORD_TOKEN
  script:
    - go test -v .
  environment:
    name: production
    action: access
  except:
    - schedules

container-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker buildx build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" --platform linux/arm64 .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" $CI_REGISTRY_IMAGE
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master
  except:
    - schedules

.setup-ssh: &setup-ssh
  - eval $(ssh-agent -s) > /dev/null
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - mv $SSH_CONFIG ~/.ssh/config
  - chmod 600 ~/.ssh/config

.setup-tailscale: &setup-tailscale
  - curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.gpg | apt-key add - > /dev/null
  - curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.list | tee /etc/apt/sources.list.d/tailscale.list > /dev/null
  - apt-get update > /dev/null
  - apt-get install -y tailscale > /dev/null
  - tailscaled --tun=userspace-networking --outbound-http-proxy-listen=localhost:1055 &> /dev/null &
  - sleep 5
  - tailscale up --authkey=${TAILSCALE_AUTHKEY} --advertise-tags=tag:gitlab-runner --hostname=gitlab-runner-$CI_PROJECT_PATH_SLUG

.setup-docker: &setup-docker
  - DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
  - mkdir -p $DOCKER_CONFIG/cli-plugins
  - curl -sSL "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o $DOCKER_CONFIG/cli-plugins/docker-compose
  - chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY &> /dev/null

production:
  stage: deploy
  image: ubuntu:jammy
  variables:
    DOCKER_HOST: "ssh://${USER_AT_HOST}"
    DISCORD_TOKEN: $PROD_DISCORD_TOKEN
  before_script:
    - apt-get update > /dev/null && apt-get install -y curl gnupg openssh-client netcat docker.io > /dev/null
    - *setup-tailscale
    - *setup-ssh
    - *setup-docker
  script:
    - docker compose up -d --wait
  environment: production
  only:
    - master
  except:
    - schedules

prod-end-to-end:
  stage: verify
  image: golang:1.22-bookworm
  variables:
    ENABLE_E2E_TESTS: 1
    E2E_DISCORD_CHANNEL_ID: $E2E_PROD_DISCORD_CHANNEL_ID
    DISCORD_TOKEN: $DEV_DISCORD_TOKEN
  script:
    - go test -v .
  environment:
    name: production
    action: verify
  only:
    - master
