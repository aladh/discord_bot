stages:
  - test
  - build
  - deploy
  - verify

lint:
  stage: test
  image: golangci/golangci-lint:v1.27.0
  script:
    - golangci-lint run -v -E golint -E gofmt -E goconst -E interfacer -E gocritic -E gocognit -E gocyclo
  except:
    - schedules

container-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" $CI_REGISTRY_IMAGE
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master
  except:
    - schedules

production:
  stage: deploy
  environment:
    name: production
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  script:
    - docker-compose up -d
  tags:
    - deploy
  only:
    - master
  except:
    - schedules

end-to-end:
  stage: verify
  image: golang:1.14-buster
  variables:
    ENABLE_E2E_TESTS: 'true'
  script:
    - go test -v main_test.go
  only:
    - master
